namespace CopperGameTools.Builder
{
    public class ProjBuilder
    {
        public ProjFile ProjFile { get; }

        public ProjBuilder(ProjFile cgtProjFile)
        {
            ProjFile = cgtProjFile;
        }

        public ProjBuilderResult Build()
        {
            Console.WriteLine("Building with CopperGameTools v0.4:");

            if (ProjFile == null || ProjFile.SourceFile.DirectoryName == null)
                return new ProjBuilderResult(ProjBuilderResultType.FailedNoErrors);

            ProjFileCheckResult check = ProjFile.FileCheck();
            foreach (var error in check.ResultErrors)
                if (error.IsCritical) // exit with errors when a critical error is found
                    return new ProjBuilderResult(ProjBuilderResultType.FailedWithErrors);


            string projectName = ProjFile.KeyGet("project.name");
            string sourceDir = Path.Combine(ProjFile.SourceFile.DirectoryName, ProjFile.KeyGet("project.src.dir"));
            string sourceOut = ProjFile.KeyGet("project.src.out");
            string outDir = Path.Combine(ProjFile.SourceFile.DirectoryName, ProjFile.KeyGet("project.out.dir"));
            string mainFile = sourceDir + ProjFile.KeyGet("project.src.main");

            if (sourceDir == null || outDir == null)
                return new ProjBuilderResult(ProjBuilderResultType.FailedWithErrors);

            Console.WriteLine("STEP 1: Collection args...");
            string[] argsList = ProjFile.KeyGet("project.src.args").Split(" ", StringSplitOptions.RemoveEmptyEntries);
            Console.WriteLine("Done!");

            /* WRITE PACKED JS FILE */

            Console.WriteLine($"STEP 2: Writing {sourceOut}.js...");

            string to_write = $"// FILE GENERATED BY COPPER GAME TOOLS PROJECT BUILDER //\n";

            // write keys from pkf file
            foreach (var key in ProjFile.FileKeys)
            {
                to_write += $"ccbSetCopperCubeVariable('{key.Key}','{key.Value}');\n";
            }

            /** ADD JAVASCRIPT SOURCE CODE **/

            List<string> listedSourceFiles = (Directory.GetFiles(sourceDir, "*.js", SearchOption.AllDirectories)).ToList();

            // write source files (except main)
            foreach (var file in listedSourceFiles)
            {
                if (file == mainFile) continue;
                to_write += $"{File.ReadAllText(file)}\n";
            }

            // write main file
            to_write += File.ReadAllText(mainFile);

            /** MAIN METHOD CALL **/

            // add main call with args
            to_write += "Main(ccbGetCopperCubeVariable('project.src.args').split(' '));";

            if (!Directory.Exists(outDir))
                Directory.CreateDirectory(outDir);
            File.WriteAllText(outDir + sourceOut + ".js", to_write);
            Console.WriteLine("Done!");

            Console.WriteLine("STEP 3: Packing content folder...");
            var folder = ProjFile.KeyGet("project.externalres.dir");
            if (folder == "")
            {
                Console.WriteLine("Note: No content folder specified.");
                Console.WriteLine("Skip...");
            }
            else
            {
                ContentPacker.ContentPacker.Pack(Path.GetFullPath(folder), projectName.ToLower(), ProjFile.KeyGet("project.externalres.out"));
                Console.WriteLine("Done!");
            }
            Console.WriteLine("Done with build.");
            return check.ResultErrors.Count > 0 ? new ProjBuilderResult(ProjBuilderResultType.DoneWithErrors) :
                new ProjBuilderResult(ProjBuilderResultType.DoneNoErrors);
        }
    }

    /**
     * Used as the Result of an Build() call.
     * Look at ProjBuilderResultType for all the different types of results
     * that this Class can store.
     **/
    public class ProjBuilderResult
    {
        public ProjBuilderResult(ProjBuilderResultType cgtProjBuilderResultType)
        {
            ResultType = cgtProjBuilderResultType;
        }

        public ProjBuilderResultType ResultType { get; }
    }

    public enum ProjBuilderResultType
    {
        DoneNoErrors,
        DoneWithErrors,
        FailedNoErrors,
        FailedWithErrors
    }

}