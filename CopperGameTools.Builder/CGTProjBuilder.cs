using System.Linq;

namespace CopperGameTools.Builder;

public class CGTProjBuilder
{
    public CGTProjFile ProjFile { get; }


    public CGTProjBuilder(CGTProjFile cgtProjFile)
    {
        ProjFile = cgtProjFile;
    }

    public CGTProjBuilderResult Build()
    {
        if (ProjFile == null) return new CGTProjBuilderResult(CGTProjBuilderResultType.FailedNoErrors);

        var check = ProjFile.FileCheck();
        foreach (var error in check.ResultErrors)
            if (error.IsCritical)
                return new CGTProjBuilderResult(CGTProjBuilderResultType.FailedWithErrors);

        //var keys = ProjFile.FileKeys;
        var projectName = ProjFile.KeyGet("project.name");
        var sourceDir = ProjFile.KeyGet("project.src.dir");
        var outName = ProjFile.KeyGet("project.out.name");
        var outDir = ProjFile.KeyGet("project.out.dir");

        if (sourceDir == null || outDir == null) return new CGTProjBuilderResult(CGTProjBuilderResultType.FailedWithErrors);

        // var listedSourceFiles = (Directory.GetFiles(sourceDir, "*.js", SearchOption.AllDirectories)).ToList();

        var toWrite = $"//FILE GENERATED BY COPPER GAME TOOLS PROJECT BUILDER//\n";
        // foreach (var file in listedSourceFiles)
        // {
        //     toWrite += $"// ---- {file} ---- //" + 
        //         $"\n{File.ReadAllText(file)}" + 
        //         $"\n// ---- {file} ---- //";
        // }

        File.WriteAllText(@".\f.js", toWrite);
        return check.ResultErrors.Count > 0 ? new CGTProjBuilderResult(CGTProjBuilderResultType.DoneWithErrors) : 
            new CGTProjBuilderResult(CGTProjBuilderResultType.DoneNoErrors);
    }
}

public class CGTProjBuilderResult
{
    public CGTProjBuilderResult(CGTProjBuilderResultType cgtProjBuilderResultType)
    {
        ResultType = cgtProjBuilderResultType;
    }

    public CGTProjBuilderResultType ResultType { get; }
}

public enum CGTProjBuilderResultType
{
    DoneNoErrors,
    DoneWithErrors,
    FailedNoErrors,
    FailedWithErrors
}
