using System.Linq;

namespace CopperGameTools.Builder;

public class CGTProjBuilder
{
    public CGTProjFile ProjFile { get; }


    public CGTProjBuilder(CGTProjFile cgtProjFile)
    {
        ProjFile = cgtProjFile;
    }

    public CGTProjBuilderResult Build()
    {
        if (ProjFile == null || ProjFile.SourceFile.DirectoryName == null) return new CGTProjBuilderResult(CGTProjBuilderResultType.FailedNoErrors);

        var check = ProjFile.FileCheck();
        foreach (var error in check.ResultErrors)
            if (error.IsCritical)
                return new CGTProjBuilderResult(CGTProjBuilderResultType.FailedWithErrors);

        var projectName = ProjFile.KeyGet("project.name");
        var sourceDir = Path.Combine(ProjFile.SourceFile.DirectoryName,ProjFile.KeyGet("project.src.dir"));
        var sourceOut = ProjFile.KeyGet("project.src.out");
        var outDir = Path.Combine(ProjFile.SourceFile.DirectoryName, ProjFile.KeyGet("project.out.dir"));
        var mainFile = sourceDir + ProjFile.KeyGet("project.src.main");

        var argsList = new string[]{};

        if (ProjFile.KeyGet("project.src.args") != "")
        {
            System.Console.WriteLine("Collection args...");
            argsList = ProjFile.KeyGet("project.src.args").Split(" ", StringSplitOptions.RemoveEmptyEntries);
        }

        if (sourceDir == null || outDir == null) return new CGTProjBuilderResult(CGTProjBuilderResultType.FailedWithErrors);

        var listedSourceFiles = (Directory.GetFiles(sourceDir, "*.js", SearchOption.AllDirectories)).ToList();

        var toWrite = $"// FILE GENERATED BY COPPER GAME TOOLS PROJECT BUILDER//\n";

        toWrite += $"// KEYS FROM {ProjFile.SourceFile.Name}\n";
        foreach (var key in ProjFile.FileKeys)
        {
            toWrite += $"ccbSetCopperCubeVariable('{key.Key}','{key.Value}');\n";
        }

        toWrite += $"// CODE FROM {sourceDir}\n";
        foreach (var file in listedSourceFiles)
        {
            if (file == mainFile) continue;
            toWrite += $"{File.ReadAllText(file)}\n";
        }

        toWrite += File.ReadAllText(mainFile);

        toWrite += "Main(ccbGetCopperCubeVariable('project.src.args').split(' '));";

        File.WriteAllText(outDir + sourceOut + ".js", toWrite);
        System.Console.WriteLine("Done writing " + sourceOut + ".js.");
        System.Console.WriteLine("Packing game folder...");
        return check.ResultErrors.Count > 0 ? new CGTProjBuilderResult(CGTProjBuilderResultType.DoneWithErrors) : 
            new CGTProjBuilderResult(CGTProjBuilderResultType.DoneNoErrors);
    }
}

public class CGTProjBuilderResult
{
    public CGTProjBuilderResult(CGTProjBuilderResultType cgtProjBuilderResultType)
    {
        ResultType = cgtProjBuilderResultType;
    }

    public CGTProjBuilderResultType ResultType { get; }
}

public enum CGTProjBuilderResultType
{
    DoneNoErrors,
    DoneWithErrors,
    FailedNoErrors,
    FailedWithErrors
}
